require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SensorTypesController do
  before(:each) do
    # Sign in as a user first
    u = User.find_by_id( 1 )
    u.should_not be_nil
    sign_in u
  end

  # This should return the minimal set of attributes required to create a valid
  # SensorType. As you add validations to SensorType, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    # We need a data type
    if DataType.first == nil
      a = DataType.new
      a.longhand_unit = "Longhand"
      a.shorthand_unit = "L"
      a.save
    end

    { "name" => "MyString",
      "description" => "My description is great",
      "data_type_id" => DataType.first.id,
      "pins_used" => 1,
      "library_file" => "temp.rb" }
  end

  describe "GET show" do
    it "assigns the requested sensor_type as @sensor_type" do
      sensor_type = SensorType.create! valid_attributes
      get :show, {:id => sensor_type.to_param}
      assigns(:sensor_type).should eq(sensor_type)
    end
  end

  describe "GET new" do
    it "assigns a new sensor_type as @sensor_type" do
      get :new, {}
      assigns(:sensor_type).should be_a_new(SensorType)
    end
  end

  describe "GET edit" do
    it "assigns the requested sensor_type as @sensor_type" do
      sensor_type = SensorType.create! valid_attributes
      get :edit, {:id => sensor_type.to_param}
      assigns(:sensor_type).should eq(sensor_type)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new SensorType" do
        expect {
          post :create, {:sensor_type => valid_attributes}
        }.to change(SensorType, :count).by(1)
      end

      it "assigns a newly created sensor_type as @sensor_type" do
        post :create, {:sensor_type => valid_attributes}
        assigns(:sensor_type).should be_a(SensorType)
        assigns(:sensor_type).should be_persisted
      end

      it "redirects to the created sensor_type" do
        post :create, {:sensor_type => valid_attributes}
        response.should redirect_to(SensorType.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved sensor_type as @sensor_type" do
        # Trigger the behavior that occurs when invalid params are submitted
        SensorType.any_instance.stub(:save).and_return(false)
        post :create, {:sensor_type => { "name" => "invalid value" }}
        assigns(:sensor_type).should be_a_new(SensorType)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        SensorType.any_instance.stub(:save).and_return(false)
        post :create, {:sensor_type => { "name" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested sensor_type" do
        sensor_type = SensorType.create! valid_attributes
        # Assuming there are no other sensor_types in the database, this
        # specifies that the SensorType created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        SensorType.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
        put :update, {:id => sensor_type.to_param, :sensor_type => { "name" => "MyString" }}
      end

      it "assigns the requested sensor_type as @sensor_type" do
        sensor_type = SensorType.create! valid_attributes
        put :update, {:id => sensor_type.to_param, :sensor_type => valid_attributes}
        assigns(:sensor_type).should eq(sensor_type)
      end

      it "redirects to the sensor_type" do
        sensor_type = SensorType.create! valid_attributes
        put :update, {:id => sensor_type.to_param, :sensor_type => valid_attributes}
        response.should redirect_to(sensor_type)
      end
    end

    describe "with invalid params" do
      it "assigns the sensor_type as @sensor_type" do
        sensor_type = SensorType.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SensorType.any_instance.stub(:save).and_return(false)
        put :update, {:id => sensor_type.to_param, :sensor_type => { "name" => "invalid value" }}
        assigns(:sensor_type).should eq(sensor_type)
      end

      it "re-renders the 'edit' template" do
        sensor_type = SensorType.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SensorType.any_instance.stub(:save).and_return(false)
        put :update, {:id => sensor_type.to_param, :sensor_type => { "name" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested sensor_type" do
      sensor_type = SensorType.create! valid_attributes
      expect {
        delete :destroy, {:id => sensor_type.to_param}
      }.to change(SensorType, :count).by(-1)
    end

    it "redirects to the sensor_types list" do
      sensor_type = SensorType.create! valid_attributes
      delete :destroy, {:id => sensor_type.to_param}
      response.should redirect_to(sensor_types_url)
    end
  end

end

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AccessControlsController do

  # This should return the minimal set of attributes required to create a valid
  # AccessControl. As you add validations to AccessControl, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "access_control_type_id" => "1", "value" => "123456", "description" => "RSpec description", :enabled => false } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccessControlsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    # Sign in as a user first
    u = User.find_by_id( 1 )
    u.should_not be_nil
    sign_in u
  end

  describe "GET index" do
    it "assigns all access_controls as @users_access_controls" do
      user = User.first
      access_control = AccessControl.new valid_attributes
      access_control.user_id = user.id
      access_control.save

      get :index, {:user_id => user.id}
      assigns(:access_controls).should eq([access_control])
    end
  end

  describe "GET show" do
    it "assigns the requested users_access_control as @users_access_control" do
      user = User.first
      access_control = AccessControl.new valid_attributes
      access_control.user_id = user.id
      access_control.save

      get :show, {:user_id => user.id, :id => access_control.to_param}
      assigns(:access_control).should eq(access_control)
    end
  end

  describe "GET new" do
    it "assigns a new users_access_control as @users_access_control" do
      user = User.first
      get :new, {:user_id => user.id}
      assigns(:access_control).should be_a_new(AccessControl)
    end
  end

  describe "GET edit" do
    it "assigns the requested users_access_control as @users_access_control" do
      user = User.first
      access_control = AccessControl.new valid_attributes
      access_control.user_id = user.id
      access_control.save

      get :edit, {:user_id => user.id, :id => access_control.to_param}
      assigns(:access_control).should eq(access_control)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new AccessControl" do
        expect {
          user = User.first
          post :create, {:user_id => user.id, :access_control => valid_attributes}
        }.to change(AccessControl, :count).by(1)
      end

      it "assigns a newly created users_access_control as @users_access_control" do
        user = User.first
        post :create, {:user_id => user.id, :access_control => valid_attributes}
        assigns(:access_control).should be_a(AccessControl)
        assigns(:access_control).should be_persisted
      end

      it "redirects to the created users_access_control" do
        user = User.first
        post :create, {:user_id => user.id, :access_control => valid_attributes}
        response.should redirect_to(user_access_control_path(user.id, AccessControl.last.to_param))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved users_access_control as @users_access_control" do
        # Trigger the behavior that occurs when invalid params are submitted
        AccessControl.any_instance.stub(:save).and_return(false)
        user = User.first
        post :create, {:user_id => user.id, :access_control => { "access_control_type_id" => "invalid value" }}
        assigns(:access_control).should be_a_new(AccessControl)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        AccessControl.any_instance.stub(:save).and_return(false)
        user = User.first
        post :create, {:user_id => user.id, :access_control => { "access_control_type_id" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested users_access_control" do
        user = User.first
        access_control = AccessControl.new valid_attributes
        access_control.user_id = user.id
        access_control.save
        # Assuming there are no other users_access_controls in the database, this
        # specifies that the AccessControl created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        AccessControl.any_instance.should_receive(:update_attributes).with({ "access_control_type_id" => "1" })
        put :update, {:user_id => user.id, :id => access_control.to_param, :access_control => { "access_control_type_id" => "1" }}
      end

      it "assigns the requested users_access_control as @users_access_control" do
        user = User.first
        access_control = AccessControl.new valid_attributes
        access_control.user_id = user.id
        access_control.save
        put :update, {:user_id => user.id, :id => access_control.to_param, :access_control => valid_attributes}
        assigns(:access_control).should eq(access_control)
      end

      it "redirects to the users_access_control" do
        user = User.first
        access_control = AccessControl.new valid_attributes
        access_control.user_id = user.id
        access_control.save
        put :update, {:user_id => user.id, :id => access_control.to_param, :access_control => valid_attributes}
        response.should redirect_to(user_access_control_path(user.id, access_control.to_param))
      end
    end

    describe "with invalid params" do
      it "assigns the users_access_control as @users_access_control" do
        user = User.first
        access_control = AccessControl.new valid_attributes
        access_control.user_id = user.id
        access_control.save
        # Trigger the behavior that occurs when invalid params are submitted
        AccessControl.any_instance.stub(:save).and_return(false)
        put :update, {:user_id => user.id, :id => access_control.to_param, :access_control => { "access_control_type_id" => "invalid value" }}
        assigns(:access_control).should eq(access_control)
      end

      it "re-renders the 'edit' template" do
        user = User.first
        access_control = AccessControl.new valid_attributes
        access_control.user_id = user.id
        access_control.save
        # Trigger the behavior that occurs when invalid params are submitted
        AccessControl.any_instance.stub(:save).and_return(false)
        put :update, {:user_id => user.id, :id => access_control.to_param, :access_control => { "access_control_type_id" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested users_access_control" do
      user = User.first
      access_control = AccessControl.new valid_attributes
      access_control.user_id = user.id
      access_control.save
      expect {
        delete :destroy, {:user_id => user.id, :id => access_control.to_param}
      }.to change(AccessControl, :count).by(-1)
    end

    it "redirects to the users_access_controls list" do
      user = User.first
      access_control = AccessControl.new valid_attributes
      access_control.user_id = user.id
      access_control.save
      delete :destroy, {:user_id => user.id, :id => access_control.to_param}
      response.should redirect_to(user_access_controls_path(user.id))
    end
  end

end
